'use client';

import { useState, useEffect } from 'react';

interface HistoryItem {
  id: string;
  customerName: string;
  mobileNumber: string;
  billAmount: number;
  tipAmount: number;
  totalAmount: number;
  date: string;
  tipPercentage: number;
}

export default function TipCalculatorPage() {
  const [customerName, setCustomerName] = useState('');
  const [mobileNumber, setMobileNumber] = useState('');
  const [billAmount, setBillAmount] = useState('');
  const [tipPercentage, setTipPercentage] = useState('');
  const [tipAmount, setTipAmount] = useState('');
  const [isAmountMode, setIsAmountMode] = useState(false);
  const [selectedPreset, setSelectedPreset] = useState<number | null>(null);
  const [showToast, setShowToast] = useState(false);
  const [activeTab, setActiveTab] = useState('calculator');
  const [isLoaded, setIsLoaded] = useState(false);
  const [history, setHistory] = useState<HistoryItem[]>([
    {
      id: '1',
      customerName: 'Emily Johnson',
      mobileNumber: '+1234567890',
      billAmount: 50.00,
      tipAmount: 7.50,
      totalAmount: 57.50,
      date: 'June 21, 2025',
      tipPercentage: 15
    },
    {
      id: '2',
      customerName: 'Michael Chen',
      mobileNumber: '+1234567891',
      billAmount: 70.00,
      tipAmount: 14.00,
      totalAmount: 84.00,
      date: 'June 21, 2025',
      tipPercentage: 20
    },
    {
      id: '3',
      customerName: 'Sarah Williams',
      mobileNumber: '+1234567892',
      billAmount: 40.00,
      tipAmount: 7.20,
      totalAmount: 47.20,
      date: 'June 20, 2025',
      tipPercentage: 18
    }
  ]);

  const presetPercentages = [10, 15, 18, 20, 25];

  useEffect(() => {
    setIsLoaded(true);
  }, []);

  // Calculate tip based on current inputs
  useEffect(() => {
    const bill = parseFloat(billAmount) || 0;
    
    if (!isAmountMode) {
      // Percentage mode
      const percentage = parseFloat(tipPercentage) || 0;
      const calculatedTip = bill * (percentage / 100);
      setTipAmount(calculatedTip.toFixed(2));
    }
  }, [billAmount, tipPercentage, isAmountMode]);

  const handlePresetClick = (percentage: number) => {
    setSelectedPreset(percentage);
    setTipPercentage(percentage.toString());
  };

  const handleTipPercentageChange = (value: string) => {
    setTipPercentage(value);
    setSelectedPreset(null);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const bill = parseFloat(billAmount) || 0;
    const tip = parseFloat(tipAmount) || 0;
    
    if (!customerName || !mobileNumber || bill <= 0) {
      alert('Please fill in all required fields');
      return;
    }

    const newHistoryItem: HistoryItem = {
      id: Date.now().toString(),
      customerName,
      mobileNumber,
      billAmount: bill,
      tipAmount: tip,
      totalAmount: bill + tip,
      date: new Date().toLocaleDateString('en-US', { 
        month: 'long', 
        day: 'numeric', 
        year: 'numeric' 
      }),
      tipPercentage: Math.round((tip / bill) * 100)
    };

    setHistory(prev => [newHistoryItem, ...prev]);
    
    // Show success toast
    setShowToast(true);
    setTimeout(() => setShowToast(false), 3000);

    // Reset form
    setCustomerName('');
    setMobileNumber('');
    setBillAmount('');
    setTipPercentage('');
    setTipAmount('');
    setSelectedPreset(null);
  };

  const summaryBill = parseFloat(billAmount) || 0;
  const summaryTip = parseFloat(tipAmount) || 0;
  const summaryTotal = summaryBill + summaryTip;

  const handleTabClick = (tab: string) => {
    setActiveTab(tab);
  };

  const renderCalculatorContent = () => (
    <div className={`grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8 transform transition-all duration-1000 ${isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
      {/* Calculator Form */}
      <div className="bg-gray-900/80 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-700/50 overflow-hidden transform transition-all duration-500 hover:shadow-cyan-500/10 hover:border-cyan-500/30 hover:scale-[1.02] group">
        <div className="bg-gradient-to-r from-cyan-600 via-blue-600 to-purple-600 p-6 relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-cyan-600/20 via-blue-600/20 to-purple-600/20 animate-pulse"></div>
          <div className="text-center relative z-10">
            <h2 className="text-2xl font-bold text-white mb-2 animate-fadeInDown">
              ðŸ’° Calculate Your Tip
            </h2>
            <p className="text-cyan-100 text-sm animate-fadeInUp">
              Split bills and calculate tips with ease
            </p>
          </div>
        </div>

        <div className="p-6 lg:p-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Customer Name */}
            <div className="group animate-slideInLeft" style={{animationDelay: '0.1s'}}>
              <label htmlFor="customerName" className="block text-sm font-semibold text-gray-300 mb-2">
                Customer Name
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg className="w-5 h-5 text-gray-500 group-focus-within:text-cyan-400 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                </div>
                <input
                  type="text"
                  id="customerName"
                  value={customerName}
                  onChange={(e) => setCustomerName(e.target.value)}
                  className="block w-full pl-12 pr-4 py-3 border border-gray-600 bg-gray-800/50 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 focus:bg-gray-800 transition-all duration-300 hover:bg-gray-800 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/10"
                  placeholder="Enter customer name"
                  required
                />
              </div>
            </div>

            {/* Mobile Number */}
            <div className="group animate-slideInLeft" style={{animationDelay: '0.2s'}}>
              <label htmlFor="mobileNumber" className="block text-sm font-semibold text-gray-300 mb-2">
                Mobile Number
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <svg className="w-5 h-5 text-gray-500 group-focus-within:text-cyan-400 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                </div>
                <input
                  type="tel"
                  id="mobileNumber"
                  value={mobileNumber}
                  onChange={(e) => setMobileNumber(e.target.value)}
                  className="block w-full pl-12 pr-4 py-3 border border-gray-600 bg-gray-800/50 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 focus:bg-gray-800 transition-all duration-300 hover:bg-gray-800 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/10"
                  placeholder="Enter mobile number"
                  required
                />
              </div>
            </div>

            {/* Bill Amount */}
            <div className="group animate-slideInLeft" style={{animationDelay: '0.3s'}}>
              <label htmlFor="billAmount" className="block text-sm font-semibold text-gray-300 mb-2">
                Bill Amount
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <span className="text-gray-500 font-medium group-focus-within:text-cyan-400 transition-colors duration-300">$</span>
                </div>
                <input
                  type="number"
                  id="billAmount"
                  value={billAmount}
                  onChange={(e) => setBillAmount(e.target.value)}
                  min="0"
                  step="0.01"
                  className="block w-full pl-12 pr-4 py-3 border border-gray-600 bg-gray-800/50 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 focus:bg-gray-800 transition-all duration-300 hover:bg-gray-800 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/10"
                  placeholder="0.00"
                  required
                />
              </div>
            </div>

            {/* Tip Options */}
            <div className="bg-gray-800/30 backdrop-blur-sm rounded-xl p-4 border border-gray-700/50 animate-slideInLeft" style={{animationDelay: '0.4s'}}>
              <div className="flex items-center justify-between mb-4">
                <span className="text-sm font-semibold text-gray-300">ðŸ’¡ Tip Options</span>
                <div className="flex items-center space-x-3">
                  <span className="text-xs text-gray-400 font-medium">
                    {isAmountMode ? 'Amount' : 'Percentage'}
                  </span>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      className="sr-only peer"
                      checked={isAmountMode}
                      onChange={(e) => setIsAmountMode(e.target.checked)}
                    />
                    <div className="w-12 h-6 bg-gray-700 peer-focus:ring-4 peer-focus:ring-cyan-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all duration-300 peer-checked:bg-gradient-to-r peer-checked:from-cyan-500 peer-checked:to-blue-500 hover:bg-gray-600 peer-checked:hover:from-cyan-600 peer-checked:hover:to-blue-600 shadow-lg transition-all duration-300 hover:shadow-cyan-500/20"></div>
                  </label>
                </div>
              </div>

              {/* Percentage Input */}
              <div className={`transition-all duration-500 transform ${isAmountMode ? 'opacity-0 max-h-0 overflow-hidden scale-y-0' : 'opacity-100 max-h-96 scale-y-100'}`}>
                <label htmlFor="tipPercentage" className="block text-sm font-medium text-gray-300 mb-3">
                  Tip Percentage
                </label>
                <div className="grid grid-cols-5 gap-2 mb-4">
                  {presetPercentages.map((percentage, index) => (
                    <button
                      key={percentage}
                      type="button"
                      onClick={() => handlePresetClick(percentage)}
                      className={`py-3 text-sm font-semibold rounded-lg cursor-pointer transition-all duration-300 transform hover:scale-110 active:scale-95 animate-bounceIn ${
                        selectedPreset === percentage
                          ? 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-lg shadow-cyan-500/30 border-2 border-cyan-400'
                          : 'bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white hover:shadow-md border border-gray-600 hover:border-cyan-400'
                      }`}
                      style={{animationDelay: `${index * 0.1}s`}}
                    >
                      {percentage}%
                    </button>
                  ))}
                </div>
                <div className="relative group">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <span className="text-gray-500 font-medium group-focus-within:text-cyan-400 transition-colors duration-300">%</span>
                  </div>
                  <input
                    type="number"
                    id="tipPercentage"
                    value={tipPercentage}
                    onChange={(e) => handleTipPercentageChange(e.target.value)}
                    min="0"
                    max="100"
                    className="block w-full pl-12 pr-4 py-3 border border-gray-600 bg-gray-800 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all duration-300 hover:shadow-md hover:border-cyan-400"
                    placeholder="Custom percentage"
                  />
                </div>
              </div>

              {/* Amount Input */}
              <div className={`transition-all duration-500 transform ${!isAmountMode ? 'opacity-0 max-h-0 overflow-hidden scale-y-0' : 'opacity-100 max-h-96 scale-y-100'}`}>
                <label htmlFor="tipAmount" className="block text-sm font-medium text-gray-300 mb-3">
                  Tip Amount
                </label>
                <div className="relative group">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <span className="text-gray-500 font-medium group-focus-within:text-cyan-400 transition-colors duration-300">$</span>
                  </div>
                  <input
                    type="number"
                    id="tipAmount"
                    value={tipAmount}
                    onChange={(e) => setTipAmount(e.target.value)}
                    min="0"
                    step="0.01"
                    className="block w-full pl-12 pr-4 py-3 border border-gray-600 bg-gray-800 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all duration-300 hover:shadow-md hover:border-cyan-400"
                    placeholder="0.00"
                  />
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 text-white py-4 px-6 rounded-xl hover:from-cyan-600 hover:via-blue-600 hover:to-purple-600 focus:outline-none focus:ring-4 focus:ring-cyan-500/30 transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] shadow-lg hover:shadow-2xl hover:shadow-cyan-500/20 font-semibold text-lg animate-pulse-glow"
            >
              âœ¨ Calculate & Submit
            </button>
          </form>
        </div>
      </div>

      {/* Summary & Preview */}
      <div className={`space-y-6 transform transition-all duration-1000 ${isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`} style={{transitionDelay: '0.3s'}}>
        {/* Summary Card */}
        <div className="bg-gradient-to-br from-emerald-600 via-teal-600 to-cyan-600 rounded-2xl shadow-2xl p-6 lg:p-8 text-white transform transition-all duration-500 hover:shadow-emerald-500/20 hover:scale-[1.02] relative overflow-hidden group">
          <div className="absolute inset-0 bg-gradient-to-br from-emerald-600/20 via-teal-600/20 to-cyan-600/20 animate-pulse"></div>
          <div className="text-center mb-6 relative z-10">
            <h3 className="text-xl font-bold mb-2 animate-slideInDown">ðŸ’³ Bill Summary</h3>
            <p className="text-emerald-100 text-sm animate-slideInUp">Review your calculation</p>
          </div>
          
          <div className="space-y-4 relative z-10">
            <div className="flex justify-between items-center p-3 bg-white/10 rounded-lg backdrop-blur-sm transition-all duration-300 hover:bg-white/20 animate-slideInLeft">
              <span className="text-emerald-100 font-medium">Bill Amount:</span>
              <span className="text-xl font-bold animate-countUp">${summaryBill.toFixed(2)}</span>
            </div>
            <div className="flex justify-between items-center p-3 bg-white/10 rounded-lg backdrop-blur-sm transition-all duration-300 hover:bg-white/20 animate-slideInRight">
              <span className="text-emerald-100 font-medium">Tip Amount:</span>
              <span className="text-xl font-bold animate-countUp">${summaryTip.toFixed(2)}</span>
            </div>
            <div className="border-t border-white/20 pt-4">
              <div className="flex justify-between items-center p-4 bg-white/20 rounded-xl backdrop-blur-md transition-all duration-300 hover:bg-white/30 animate-slideInUp">
                <span className="text-lg font-semibold">Total Amount:</span>
                <span className="text-3xl font-bold animate-pulse text-yellow-300 drop-shadow-lg">
                  ${summaryTotal.toFixed(2)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-gray-900/80 backdrop-blur-xl rounded-xl p-4 shadow-2xl border border-gray-700/50 transform transition-all duration-500 hover:shadow-blue-500/10 hover:scale-[1.05] hover:border-blue-500/30 animate-slideInLeft">
            <div className="text-center">
              <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto mb-2 animate-spin-slow">
                <span className="text-white font-bold text-lg">%</span>
              </div>
              <p className="text-xs text-gray-400 font-medium">Tip Percentage</p>
              <p className="text-xl font-bold text-white animate-countUp">
                {summaryBill > 0 ? Math.round((summaryTip / summaryBill) * 100) : 0}%
              </p>
            </div>
          </div>
          <div className="bg-gray-900/80 backdrop-blur-xl rounded-xl p-4 shadow-2xl border border-gray-700/50 transform transition-all duration-500 hover:shadow-green-500/10 hover:scale-[1.05] hover:border-green-500/30 animate-slideInRight">
            <div className="text-center">
              <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-2 animate-bounce">
                <span className="text-white font-bold text-lg">#</span>
              </div>
              <p className="text-xs text-gray-400 font-medium">Calculations</p>
              <p className="text-xl font-bold text-white animate-countUp">{history.length}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderHistoryContent = () => (
    <div className={`bg-gray-900/80 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-700/50 p-6 lg:p-8 transform transition-all duration-1000 ${isLoaded ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-2xl font-bold text-white flex items-center animate-slideInLeft">
          ðŸ“Š Recent Calculations
        </h3>
        <div className="bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-4 py-2 rounded-lg text-sm font-semibold animate-slideInRight">
          {history.length} Records
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
        {history.map((item, index) => (
          <div
            key={item.id}
            className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-5 border border-gray-700/50 transform transition-all duration-500 hover:shadow-lg hover:shadow-cyan-500/10 hover:scale-[1.02] hover:border-cyan-500/30 animate-slideInUp"
            style={{
              animationDelay: `${index * 100}ms`,
            }}
          >
            <div className="flex items-start justify-between mb-3">
              <div>
                <p className="font-semibold text-white text-lg">
                  {item.customerName}
                </p>
                <p className="text-xs text-gray-400 font-medium">
                  {item.date} â€¢ {item.tipPercentage}% tip
                </p>
              </div>
              <div className="bg-gradient-to-r from-emerald-500 to-teal-500 text-white p-2 rounded-lg animate-pulse">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                </svg>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Bill:</span>
                <span className="font-semibold text-white">${item.billAmount.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Tip:</span>
                <span className="font-semibold text-emerald-400">${item.tipAmount.toFixed(2)}</span>
              </div>
              <div className="border-t border-gray-700 pt-2 flex justify-between">
                <span className="font-semibold text-gray-300">Total:</span>
                <span className="text-lg font-bold text-cyan-400 animate-pulse">
                  ${item.totalAmount.toFixed(2)}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-cyan-500/10 rounded-full animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-purple-500/10 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-blue-500/5 rounded-full animate-pulse" style={{animationDelay: '2s'}}></div>
      </div>

      {/* Header */}
      <div className="sticky top-0 bg-black/80 backdrop-blur-md shadow-2xl z-30 border-b border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent animate-pulse">
                ðŸ’° TipMate
              </div>
            </div>
            <div className="hidden sm:block">
              <h1 className="text-lg font-semibold text-gray-300">
                Smart Tip Calculator
              </h1>
            </div>
            <div className="w-10 h-10 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-xl flex items-center justify-center cursor-pointer hover:shadow-lg hover:shadow-cyan-500/20 transition-all duration-300 hover:scale-110 animate-spin-slow">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-24 lg:pb-8 relative z-10">
        {activeTab === 'calculator' && renderCalculatorContent()}
        {activeTab === 'history' && renderHistoryContent()}
        {activeTab === 'profile' && (
          <div className="bg-gray-900/80 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-700/50 p-8 text-center transform transition-all duration-1000 animate-slide

        wSs8C8NCQLQvp22M